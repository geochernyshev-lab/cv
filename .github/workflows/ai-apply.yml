name: AI Apply Patch

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  apply:
    if: contains(github.event.comment.body, '/apply')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract diff block
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = (context.payload.comment.body || '').trim();
            // 1) fenced ```diff ...``` или ```patch ...```
            const fence = body.match(/```(?:diff|patch)?\s*([\s\S]*?)```/i);
            let diffText = '';
            if (fence && fence[1]) {
              diffText = fence[1].trim();
            } else {
              // 2) фолбэк: всё после "diff --git"
              const i = body.indexOf('diff --git');
              if (i !== -1) diffText = body.slice(i).trim();
            }
            if (!diffText) {
              core.setFailed('Не найден патч. Вставь блок ```diff ...``` или начни с "diff --git".');
            } else {
              fs.writeFileSync('ai_patch.diff', diffText + '\n');
              core.info('Patch extracted OK');
            }

      - name: Determine base branch
        id: base
        uses: actions/github-script@v7
        with:
          script: |
            // Явно берём дефолтную ветку репозитория
            return { base: context.payload.repository.default_branch };

      - name: Create patch branch from base
        env:
          BASE: ${{ steps.base.outputs.result.base }}
        run: |
          git config user.name "ai-patch-bot"
          git config user.email "ai-patch-bot@users.noreply.github.com"
          git checkout "$BASE"
          git pull --ff-only origin "$BASE"
          git checkout -b "ai/patch-${{ github.run_id }}" "$BASE"

      - name: Apply patch & commit
        run: |
          set -e
          git apply --whitespace=fix ai_patch.diff
          git add -A
          # Если изменений нет, git commit завершится с кодом 1 — тогда упадём, чтобы видеть в логах
          git commit -m "AI patch ${{ github.run_id }}"

      - name: Push branch
        run: git push -u origin "ai/patch-${{ github.run_id }}"

      - name: Create PR via API (robust)
        id: makepr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const base = context.payload.repository.default_branch;
            const head = `ai/patch-${process.env.GITHUB_RUN_ID}`;

            // Проверим, нет ли уже открытого PR с этой веткой
            const prs = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`
            });
            let pr;
            if (prs.data.length > 0) {
              pr = prs.data[0];
            } else {
              pr = (await github.rest.pulls.create({
                owner, repo,
                title: `AI patch ${process.env.GITHUB_RUN_ID}`,
                head, base,
                body: `PR создан автоматически из комментария: ${context.payload.comment.html_url}`
              })).data;
            }

            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_url', pr.html_url);

      - name: Comment back with PR link
        uses: actions/github-script@v7
        with:
          script: |
            const prUrl = '${{ steps.makepr.outputs.pr_url }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: prUrl
                ? `✅ PR создан: ${prUrl}`
                : '⚠️ PR не создан (смотри логи шага "Create PR via API (robust)")'
            })
